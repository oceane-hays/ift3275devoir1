# définition des valeurs
N = int("""
172219604291138178634924980176652297603347655313304280071646410523864939208855547078498922947475940487766894695848119416
017067844129458299713889703424997977808694983717968420001033168722360067307143390485095229367172423195469582545920975539
060699530956357494837243598213416944408434967474317474605697904676813343577310719430442085422937057220239881971046349315
235043163226355302567726074269720408051461805113819456513196492192727498270702594217800502904761235711809203123842506621
973488494670663483187137290546241477681096402483981619592515049062514180404818608764516997842633077157249806627735448350
463
""".replace("\n", ""))
e = 173
C = int("""2578224837766991964852241706873499930162984363777335246122468641501061735512538799473299274541662165153134047
654687051035516530375200502311803426520351342367435650104641583997701370192432937884676463289467378319964454930746565923
662898315179625437104681454822415960430273747057849544076940825395418660556749286429207154592648719911461258651043394342
005186492417767324338168120626537233374935408953539487071473020449916257782552632994489645445032225656348512308111667924
671595962156960372537974687062304983447593253518419620827071367535787357946912291791588795498054130819968893224825865471
5380981800909""".replace("\n", ""))

# facteurs de N
p = int("""1071508607186267320948425049060001810561404811705533607443750388370351051124936122493198378815695858127594672
917553146825187145285692314043598457757469857480393456777482423098542107460506237114187795418215304647498358194126739876
7559165543946077062914571196477686542167660429831652624386837205668069673""".replace("\n", ""))
q = int("""1607262910779400981422637573590002715842107217558300411165625582555526576687404183739797568223543787191392009
376329720237780717928538471065397686636204786220590185166223634647813161190759355671281693127322956971247537291190109815
1338748315919115594371856794716529813251490644747478936580257043048672231""".replace("\n", ""))

# calcul de φ(N)
phi_n = (p - 1) * (q - 1)


# exponentiation modulaire
def modular_pow(base, exponent, modulus):
    result = 1
    base = base % modulus
    while exponent > 0:
        if exponent % 2 == 1:
            result = (result * base) % modulus
        exponent = exponent >> 1
        base = (base * base) % modulus
    return result


# algorithme d'Euclide
def egcd(a, b):
    if a == 0:
        return b, 0, 1
    else:
        g, y, x = egcd(b % a, a)
        return g, x - (b // a) * y, y


# inverse multiplicatif de a modulo m
def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception("Pas d'inverse multiplicatif")
    else:
        return x % m


# calcul de d
d = modinv(e, phi_n)

# décryptage du message
M = modular_pow(C, d, N)
print("Le message déchiffré est :", M)

# conversion en texte UTF-8
message_text = M.to_bytes((M.bit_length() + 7) // 8, 'big').decode('utf-8')
print("Nom de l'auteur :", message_text)
